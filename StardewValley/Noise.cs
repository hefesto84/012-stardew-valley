namespace StardewValley
{
	public class Noise
	{
		private static byte[] perm = new byte[512]
		{
			151,
			160,
			137,
			91,
			90,
			15,
			131,
			13,
			201,
			95,
			96,
			53,
			194,
			233,
			7,
			225,
			140,
			36,
			103,
			30,
			69,
			142,
			8,
			99,
			37,
			240,
			21,
			10,
			23,
			190,
			6,
			148,
			247,
			120,
			234,
			75,
			0,
			26,
			197,
			62,
			94,
			252,
			219,
			203,
			117,
			35,
			11,
			32,
			57,
			177,
			33,
			88,
			237,
			149,
			56,
			87,
			174,
			20,
			125,
			136,
			171,
			168,
			68,
			175,
			74,
			165,
			71,
			134,
			139,
			48,
			27,
			166,
			77,
			146,
			158,
			231,
			83,
			111,
			229,
			122,
			60,
			211,
			133,
			230,
			220,
			105,
			92,
			41,
			55,
			46,
			245,
			40,
			244,
			102,
			143,
			54,
			65,
			25,
			63,
			161,
			1,
			216,
			80,
			73,
			209,
			76,
			132,
			187,
			208,
			89,
			18,
			169,
			200,
			196,
			135,
			130,
			116,
			188,
			159,
			86,
			164,
			100,
			109,
			198,
			173,
			186,
			3,
			64,
			52,
			217,
			226,
			250,
			124,
			123,
			5,
			202,
			38,
			147,
			118,
			126,
			255,
			82,
			85,
			212,
			207,
			206,
			59,
			227,
			47,
			16,
			58,
			17,
			182,
			189,
			28,
			42,
			223,
			183,
			170,
			213,
			119,
			248,
			152,
			2,
			44,
			154,
			163,
			70,
			221,
			153,
			101,
			155,
			167,
			43,
			172,
			9,
			129,
			22,
			39,
			253,
			19,
			98,
			108,
			110,
			79,
			113,
			224,
			232,
			178,
			185,
			112,
			104,
			218,
			246,
			97,
			228,
			251,
			34,
			242,
			193,
			238,
			210,
			144,
			12,
			191,
			179,
			162,
			241,
			81,
			51,
			145,
			235,
			249,
			14,
			239,
			107,
			49,
			192,
			214,
			31,
			181,
			199,
			106,
			157,
			184,
			84,
			204,
			176,
			115,
			121,
			50,
			45,
			127,
			4,
			150,
			254,
			138,
			236,
			205,
			93,
			222,
			114,
			67,
			29,
			24,
			72,
			243,
			141,
			128,
			195,
			78,
			66,
			215,
			61,
			156,
			180,
			151,
			160,
			137,
			91,
			90,
			15,
			131,
			13,
			201,
			95,
			96,
			53,
			194,
			233,
			7,
			225,
			140,
			36,
			103,
			30,
			69,
			142,
			8,
			99,
			37,
			240,
			21,
			10,
			23,
			190,
			6,
			148,
			247,
			120,
			234,
			75,
			0,
			26,
			197,
			62,
			94,
			252,
			219,
			203,
			117,
			35,
			11,
			32,
			57,
			177,
			33,
			88,
			237,
			149,
			56,
			87,
			174,
			20,
			125,
			136,
			171,
			168,
			68,
			175,
			74,
			165,
			71,
			134,
			139,
			48,
			27,
			166,
			77,
			146,
			158,
			231,
			83,
			111,
			229,
			122,
			60,
			211,
			133,
			230,
			220,
			105,
			92,
			41,
			55,
			46,
			245,
			40,
			244,
			102,
			143,
			54,
			65,
			25,
			63,
			161,
			1,
			216,
			80,
			73,
			209,
			76,
			132,
			187,
			208,
			89,
			18,
			169,
			200,
			196,
			135,
			130,
			116,
			188,
			159,
			86,
			164,
			100,
			109,
			198,
			173,
			186,
			3,
			64,
			52,
			217,
			226,
			250,
			124,
			123,
			5,
			202,
			38,
			147,
			118,
			126,
			255,
			82,
			85,
			212,
			207,
			206,
			59,
			227,
			47,
			16,
			58,
			17,
			182,
			189,
			28,
			42,
			223,
			183,
			170,
			213,
			119,
			248,
			152,
			2,
			44,
			154,
			163,
			70,
			221,
			153,
			101,
			155,
			167,
			43,
			172,
			9,
			129,
			22,
			39,
			253,
			19,
			98,
			108,
			110,
			79,
			113,
			224,
			232,
			178,
			185,
			112,
			104,
			218,
			246,
			97,
			228,
			251,
			34,
			242,
			193,
			238,
			210,
			144,
			12,
			191,
			179,
			162,
			241,
			81,
			51,
			145,
			235,
			249,
			14,
			239,
			107,
			49,
			192,
			214,
			31,
			181,
			199,
			106,
			157,
			184,
			84,
			204,
			176,
			115,
			121,
			50,
			45,
			127,
			4,
			150,
			254,
			138,
			236,
			205,
			93,
			222,
			114,
			67,
			29,
			24,
			72,
			243,
			141,
			128,
			195,
			78,
			66,
			215,
			61,
			156,
			180
		};

		public static float Generate(float x)
		{
			int i2 = FastFloor(x);
			int i = i2 + 1;
			float x3 = x - (float)i2;
			float x2 = x3 - 1f;
			float num = 1f - x3 * x3;
			float num2 = num * num;
			float n2 = num2 * num2 * grad(perm[i2 & 0xFF], x3);
			float num3 = 1f - x2 * x2;
			float num4 = num3 * num3;
			float n = num4 * num4 * grad(perm[i & 0xFF], x2);
			return 0.395f * (n2 + n);
		}

		public static float Generate(float x, float y)
		{
			float s = (x + y) * 0.3660254f;
			float x5 = x + s;
			float ys = y + s;
			int num = FastFloor(x5);
			int k = FastFloor(ys);
			float t8 = (float)(num + k) * 0.211324871f;
			float X0 = (float)num - t8;
			float Y0 = (float)k - t8;
			float x4 = x - X0;
			float y4 = y - Y0;
			int i;
			int j;
			if (x4 > y4)
			{
				i = 1;
				j = 0;
			}
			else
			{
				i = 0;
				j = 1;
			}
			float x3 = x4 - (float)i + 0.211324871f;
			float y3 = y4 - (float)j + 0.211324871f;
			float x2 = x4 - 1f + 0.422649741f;
			float y2 = y4 - 1f + 0.422649741f;
			int ii = num % 256;
			int jj = k % 256;
			float t7 = 0.5f - x4 * x4 - y4 * y4;
			float n4;
			if (t7 < 0f)
			{
				n4 = 0f;
			}
			else
			{
				t7 *= t7;
				n4 = t7 * t7 * grad(perm[ii + perm[jj]], x4, y4);
			}
			float t5 = 0.5f - x3 * x3 - y3 * y3;
			float n3;
			if (t5 < 0f)
			{
				n3 = 0f;
			}
			else
			{
				t5 *= t5;
				n3 = t5 * t5 * grad(perm[ii + i + perm[jj + j]], x3, y3);
			}
			float t3 = 0.5f - x2 * x2 - y2 * y2;
			float n2;
			if (t3 < 0f)
			{
				n2 = 0f;
			}
			else
			{
				t3 *= t3;
				n2 = t3 * t3 * grad(perm[ii + 1 + perm[jj + 1]], x2, y2);
			}
			return 40f * (n4 + n3 + n2);
		}

		private static int FastFloor(float x)
		{
			if (!(x > 0f))
			{
				return (int)x - 1;
			}
			return (int)x;
		}

		private static float grad(int hash, float x)
		{
			int h = hash & 0xF;
			float grad = 1f + (float)(h & 7);
			if ((h & 8) != 0)
			{
				grad = 0f - grad;
			}
			return grad * x;
		}

		private static float grad(int hash, float x, float y)
		{
			int h = hash & 7;
			float u = (h < 4) ? x : y;
			float v = (h < 4) ? y : x;
			return (((h & 1) != 0) ? (0f - u) : u) + (((h & 2) != 0) ? (-2f * v) : (2f * v));
		}

		private static float grad(int hash, float x, float y, float z)
		{
			int h = hash & 0xF;
			float u = (h < 8) ? x : y;
			float v = (h < 4) ? y : ((h == 12 || h == 14) ? x : z);
			return (((h & 1) != 0) ? (0f - u) : u) + (((h & 2) != 0) ? (0f - v) : v);
		}

		private static float grad(int hash, float x, float y, float z, float t)
		{
			int h = hash & 0x1F;
			float u = (h < 24) ? x : y;
			float v = (h < 16) ? y : z;
			float w = (h < 8) ? z : t;
			return (((h & 1) != 0) ? (0f - u) : u) + (((h & 2) != 0) ? (0f - v) : v) + (((h & 4) != 0) ? (0f - w) : w);
		}
	}
}
